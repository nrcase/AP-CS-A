/*Program Name: Lesson 7 Practice Assignment
Assignment: Module 5, Lesson 7, Practice Assignment 1
Author: Nick Case
Date: 10/14/19
Version: 1.0
Program Description: This program creates a 100 random numbers between 34.7838 and 187.056 with the commented out code finding random integers between 110 and 90 and printing a random number between 0 and <1
What I learned from this program: how to use Random class, how to create a Random object, how to change the range of the numbers and minimum for both integers and doubles
What difficulties did I have and how I solved them: I was following the video and at the end of the second one, I tried to run it and it gave me an error. I realized that I missed a semi-colon. After I put that in, the code worked as it should.
*/

import java.util.*;
public class NickCaseMod5Lesson7PA
{
    public static void main(String [] args)
    {
        Random rndm = new Random();
        //int rInt = 0; Declaring variables
        double d = 0;
        for (int j = 0; j < 100; j++) // this code below loops 100 times
        {
            //System.out.println(rndm.nextDouble()); Printing a Random Double

            //Generate number in the range from 90 to 110 inclusive
            //110-90 = 20 //Finding Range
            //rInt = 90 + rndm.nextInt(21); //Printing a random number betwen 90 - 100 using 21 in the argument to get the range and adding 90 to get the minimum
           // System.out.println(rInt); // Printing

            //Generate doubles in the range from 34.7838 (inclusive) to 187.056 (exclusive)
            //187.056 - 34.7838 = 152.2722 //Finding Range

            d = 34.7838 +  152.2722 * rndm.nextDouble(); //Generate a random number multiple it by 15.2722 (to get the range) and add 34.7838 to get the minimum
            System.out.println(d); //Print out d
        }
    }
}

/*
Sample Output:
124.1878163886942
182.73324081763764
161.146503829018
120.29926997839061
118.11288532278381
76.4241753918821
60.45615147735672
153.19405603436397
148.2006088130335
71.72527648598495
117.73414992923979
133.01736204083755
70.90729607806313
97.88072848509711
90.92039970091936
113.3501073874223
147.24021001834916
182.04052354436573
145.06906589009594
143.80558015158587
173.62561796077517
34.904270843245015
100.22272119277167
127.90292685150116
167.54982415773236
150.13416672395445
97.15245685552743
115.93458710815446
150.1906884479054
152.4517317988611
150.39125567387237
126.42982348769937
35.57256976534919
88.44037756549733
146.2883450746477
52.611071421449715
53.60410413301178
160.9093789366382
131.49349627563265
174.10487197723967
91.3232818836067
150.74577314796886
76.59132338172952
40.92726467120887
141.84356668823952
131.38105024994485
60.99657280539561
55.91817491560078
151.64248138918333
126.23471162543412
70.07602462025613
67.07688960304554
115.2746364857262
118.27058036061486
176.03023246208414
151.61209110195892
80.0874641569225
45.43283478760168
90.37203023346297
176.83231652502758
121.59664214103593
176.64362015916657
150.57727315260635
159.14991451323687
48.75660176011537
78.44358001582118
184.43086442009746
70.62384235221397
186.06686993044173
63.56705181505182
157.6725625178199
180.75502998062126
138.13289386649245
175.75141155808097
101.58249821234023
153.80173922514166
92.34231651469902
82.50292006990227
139.3273650802368
44.11120400140619
177.27861281265132
92.20559236024391
169.62749285687
162.11412222069362
102.3520119033858
152.00815793853067
80.39629571099313
78.4482516153011
155.6919158488103
168.32209532384337
76.19195564021678
47.74478194682286
48.50928588180467
156.67513794130207
161.59490481051992
55.60085933387006
53.48260070662161
83.39305577833383
159.79487060292402
83.44109636955864
 */